use std::str::FromStr;

use crate::syntax::ast::*;

grammar;

pub script: Script = {
    statement* => Sequence(<>)
}

pub statement: Statement = {
    "connect" "to" <list:(<ident> ".")*> <last:ident> => Connect({ let mut list = list; list.push(last); list }),
    "define" <ident> "as" <pattern> => Define(<>),
    "get" <obj_expr> "from" <source> => Get(<>),
}

source: Source = {
    "application" "of" <pattern> "to" <graph_expr> => Apply(<>),
    graph_expr => Direct(<>)
}

graph_expr: GraphExpr = {
    <list:(<graph> "&")*> <last: graph> => Intersection({ let mut list = list; list.push(last); list }),
}

graph: SimpleGraph = {
    <graph:ident> "with" "initials" "as" <initials:vertices> => WithEnds{ graph, initials, finals: Set(Vec::new()) },
    <graph:ident> "with" "finals" "as" <finals:vertices> => WithEnds{ graph, finals, initials: Set(Vec::new()) },
    <graph:ident> "with" "initials" "as" <initials:vertices> "and" "finals" "as" <finals:vertices> => WithEnds{<>},
    ident => GraphName(<>)
}

vertices: Vertices = {
    "[" <ns:(<number> ",")*> <n:number> "]" => Set({ let mut ns = ns; ns.push(n); ns }),
    "[" <from:number> ".." <to:number> "]" => Range{<>},
    "[]" => EmptySet,
}

obj_expr: ObjectExpr = {
    "count" "of" <list_expr> => Count(<>),
    list_expr => List(<>),
}

list_expr: ListExpr = {
    "edges" => Edges,
    <boxed<list_expr>> "which" "satisfy" <bool_expr> => Filter(<>),
}

bool_expr: BoolExpr = {
    <boxed<bool_expr>> "or" <boxed<bool_expr_and>> => Or(<>),
    bool_expr_and
}

bool_expr_and = {
    <boxed<bool_expr_and>> "and" <boxed<bool_expr_not>> => And(<>),
    bool_expr_not,
}

bool_expr_not = {
    "not" <boxed<bool_expr_not>> => Not(<>),
    bool_expr_primary,
}

bool_expr_primary = {
    in_parentheses<bool_expr>,
    "label" "is" "\"" <ident> "\"" => LabelIs(<>),
    "begin" "is" <vertex_variant> => BeginIs(<>),
    "end" "is" <vertex_variant> => EndIs(<>),
}

vertex_variant: VertexVariant = {
    "initial" => VertexVariant::Initial,
    "final" => VertexVariant::Final,
}

pattern: Pattern = {
    <boxed<pattern>> "|" <boxed<pattern_seq>> => Alt(<>),
    pattern_seq,
}

pattern_seq: Pattern = {
    pattern_many* => if <>.len() == 1 { let mut l = <>; l.pop().unwrap() } else { Seq(<>) },
}

pattern_many: Pattern = {
    <boxed<pattern_many>> "*" => Star(<>),
    <boxed<pattern_many>> "+" => Plus(<>),
    <boxed<pattern_many>> "?" => Maybe(<>),
    pattern_primary,
}

pattern_primary: Pattern = {
    in_parentheses<pattern>,
    "\"" <ident> "\"" => Term(<>),
    ident => Var(<>),
}

number: usize = {
    r"[1-9][0-9]*" => usize::from_str(<>).unwrap(),
    "0" => 0,
}

ident: String = {
    r"[_a-zA-Z][_0-9a-zA-Z]*" => <>.to_string(),
}

in_parentheses<T>: T = { "(" <T> ")" => <> }
boxed<T>: Box<T> = { T => Box::new(<>) }
